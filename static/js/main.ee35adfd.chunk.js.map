{"version":3,"sources":["utils/random.js","components/Note.js","components/Board.js","registerServiceWorker.js","index.js"],"names":["calcRandomBetween","x","y","s","Math","ceil","random","Note","state","editing","edit","_this","setState","remove","props","onRemove","index","save","e","preventDefault","onChange","newText","value","renderForm","react_default","a","createElement","react_draggable_default","disabled","className","style","onSubmit","ref","input","defaultValue","children","maxLength","rows","aria-label","floppy_o_default","renderDisplay","onClick","pencil_default","trash_default","this","right","window","innerWidth","top","innerHeight","transform","concat","nextProps","nextState","Component","nextId","prev","addToArray","id","_ref","_ref$notes","notes","Object","toConsumableArray","note","removeFromArray","_ref2","_ref2$notes","filter","updateArray","i","_ref3","_ref3$notes","map","objectSpread","Board","add","text","uniqueId","addNote","addNew","removeAll","eachNote","components_Note","key","update","removeNote","updateNote","_this2","retrieveNotes","JSON","parse","localStorage","getItem","forEach","defaultNoteData","count","arguments","length","undefined","_ref$noteData","noteData","result","floor","getRandomNotes","console","error","json","stringify","setItem","plus_default","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","render","Board_Board","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ee35adfd.chunk.js","sourcesContent":["export const getRandomNotes = ( count = 0 , { noteData = [] } = {}) => {\r\n    let result = [];\r\n    for (let x=count; x>0; x--) {\r\n        const random = Math.floor(Math.random() * noteData.length);\r\n        result = [...result, noteData[+random] ];\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const calcRandomBetween = (x, y, s) =>\r\n    x + Math.ceil( Math.random() * (y-x) ) + s;\r\n","/* eslint react/no-deprecated: warn */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Draggable from 'react-draggable';\r\nimport FaPencil from 'react-icons/lib/fa/pencil';\r\nimport FaTrash from 'react-icons/lib/fa/trash';\r\nimport FaFloppyO from 'react-icons/lib/fa/floppy-o';\r\nimport { calcRandomBetween } from '../utils/random';\r\n\r\nclass Note extends Component {\r\n\r\n    state = {\r\n        editing: false,\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.style = {\r\n            right: calcRandomBetween(0, window.innerWidth - 150, 'px'),\r\n            top: calcRandomBetween(0, window.innerHeight - 150, 'px'),\r\n            transform: `rotate( ${calcRandomBetween(-25, 25, 'deg')} )`,\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate( nextProps, nextState ) {\r\n        return (\r\n            this.props.children !== nextProps.children ||\r\n            this.state !== nextState\r\n        );\r\n    }\r\n\r\n    // componentDidUpdate() {\r\n    //     let textArea;\r\n    //     if (this.state.editing) {\r\n    //         textArea = this.newText;\r\n    //         // textArea.focus();\r\n    //         // textArea.select();\r\n    //     }\r\n    // }\r\n\r\n    edit = () => {\r\n        this.setState(() => ({\r\n            editing: true,\r\n        }));\r\n    }\r\n\r\n    remove = () =>\r\n        this.props.onRemove(this.props.index);\r\n\r\n    save = (e) => {\r\n        e.preventDefault();\r\n        this.props.onChange(this.newText.value, this.props.index);\r\n        this.setState(() => ({\r\n            editing: false,\r\n        }));\r\n    }\r\n\r\n    renderForm = () => (\r\n        <Draggable disabled>\r\n            <div>\r\n                <div className='note' style={this.style}>\r\n                    <form onSubmit={this.save}>\r\n                        <textarea\r\n                            ref={ input => {this.newText= input;} }\r\n                            defaultValue={this.props.children}\r\n                            maxLength={40}\r\n                            rows={4}\r\n                        />\r\n                        <button\r\n                            className='save'\r\n                            aria-label='save'\r\n                        >\r\n                            <FaFloppyO />\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Draggable>\r\n    )\r\n\r\n    renderDisplay = () =>(\r\n        <Draggable>\r\n            <div>\r\n                <div className='note' style={this.style}>\r\n                    <p>{this.props.children}</p>\r\n                    <span>\r\n                        <button\r\n                            onClick={this.edit}\r\n                            className='edit'\r\n                            aria-label='edit'\r\n                        >\r\n                            <FaPencil />\r\n                        </button>\r\n                        <button\r\n                            onClick={this.remove}\r\n                            className='remove'\r\n                            aria-label='remove'\r\n                        >\r\n                            <FaTrash />\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </Draggable>\r\n    )\r\n\r\n    render() {\r\n        return this.state.editing ?\r\n            this.renderForm()\r\n            : this.renderDisplay();\r\n    }\r\n}\r\n\r\nNote.propTypes = {\r\n    index: PropTypes.number.isRequired,\r\n    children: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Note;\r\n","import React, { Component } from 'react';\r\nimport FaPlus from 'react-icons/lib/fa/plus';\r\nimport FaTrash from 'react-icons/lib/fa/trash';\r\nimport defaultNoteData from '../data/data.json';\r\nimport { getRandomNotes } from '../utils/random';\r\nimport Note from './Note';\r\n\r\nexport const nextId = ( prev ) => {\r\n    const next = (prev || 0) + 1;\r\n    return next;\r\n};\r\n\r\nexport const addToArray = (value, id) => ({ notes=[] }) => ({\r\n    notes: [\r\n        ...notes,\r\n        {\r\n            id,\r\n            note: value,\r\n        },\r\n    ],\r\n});\r\n\r\nexport const removeFromArray = (id) => ({ notes=[] }) => ({\r\n    notes: notes.filter(note =>\r\n        note.id !== id\r\n    ),\r\n});\r\n\r\nexport const updateArray = (newText, i) => ({ notes=[] }) => ({\r\n    notes: notes.map(\r\n        note => note.id === i ?\r\n            { ...note, note: newText }\r\n            : note\r\n    ),\r\n});\r\n\r\nexport default class Board extends Component {\r\n\r\n    state = {\r\n        notes: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        try {\r\n            const retrieveNotes =\r\n                JSON.parse(localStorage.getItem('bulletin-board'));\r\n\r\n            if (retrieveNotes) {\r\n                retrieveNotes.forEach( x =>\r\n                    this.add(x.note)\r\n                );\r\n\r\n                return;\r\n            }\r\n\r\n            if (defaultNoteData) {\r\n                getRandomNotes(5,defaultNoteData).forEach( x =>\r\n                    this.add(x)\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error('some kind of error ', e);\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { notes } = this.state;\r\n        const json = JSON.stringify(notes);\r\n        localStorage.setItem('bulletin-board', json);\r\n    }\r\n\r\n\r\n    add = (text) => {\r\n        this.uniqueId = nextId(this.uniqueId);\r\n        const addNote = addToArray(text, this.uniqueId);\r\n        this.setState(addNote);\r\n    }\r\n\r\n    addNew = () => this.add('New Note')\r\n\r\n    removeAll = () => this.setState( () => ({ notes: [] }))\r\n\r\n    eachNote = (note) => (\r\n        <Note\r\n            key={note.id}\r\n            index={note.id}\r\n            onChange={this.update}\r\n            onRemove={this.remove}\r\n        >\r\n            {note.note}\r\n        </Note>\r\n    )\r\n\r\n    remove = (id) => {\r\n        const removeNote = removeFromArray(id);\r\n        this.setState(removeNote);\r\n    }\r\n\r\n    update = (newText, i) => {\r\n        const updateNote = updateArray(newText, i);\r\n        this.setState( updateNote );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='board'>\r\n                {this.state.notes.map(this.eachNote)}\r\n                <button\r\n                    onClick={this.addNew}\r\n                    id='add'\r\n                    aria-label='add'\r\n                >\r\n                    <FaPlus />\r\n                </button>\r\n                <button\r\n                    onClick={this.removeAll}\r\n                    id='remove-all'\r\n                    aria-label='remove all'\r\n                >\r\n                    <FaTrash />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint no-console: 0 */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost.\n                // Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing\n                // developers to the service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been\n                            // purged and the fresh content will have\n                            // been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists,\n            // and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app.\n                // Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport Board from './components/Board';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}